# Relative Path: src/python/tools/errors_const_c2python.py
"""
errors_const_c2python.py
Reads a C header file for error code definitions (e.g., #define ERR_SOMETHING <value>)
and generates a Python module with equivalent constants.

Usage:
    python3 errors_const_c2python.py <path_to_error_codes.h> <output_dir>
"""

import sys
import os
import re

def main():
    if len(sys.argv) < 3:
        print("Usage: python3 errors_const_c2python.py <input_header> <output_dir>")
        sys.exit(1)

    input_header = sys.argv[1]
    output_dir = sys.argv[2]

    if not os.path.isfile(input_header):
        print(f"Error: input header not found: {input_header}")
        sys.exit(1)

    if not os.path.isdir(output_dir):
        print(f"Error: output directory not found: {output_dir}")
        sys.exit(1)

    # Read all lines from the header
    with open(input_header, "r", encoding="utf-8") as f:
        lines = f.readlines()

    # Regex to match lines like: #define ERR_SOMETHING -1
    # capturing group(1) = "ERR_SOMETHING", group(2) = "-1"
    define_pattern = re.compile(r"^\s*#define\s+(ERR_[A-Z0-9_]+)\s+([\-0-9]+)\s*$")

    error_consts = []

    for line in lines:
        match = define_pattern.match(line)
        if match:
            # Extract the symbol name and the value
            symbol_name = match.group(1)
            value_str = match.group(2)
            error_consts.append((symbol_name, value_str))

    # Generate Python code
    output_lines = []
    output_lines.append("#src/python/consts/_generated/error_codes_generated.py")
    output_lines.append("# This file is auto-generated by errors_const_c2python.py")
    output_lines.append("# Do not edit manually.")
    output_lines.append("")
    output_lines.append('"""')
    output_lines.append("Python equivalents of C error code constants from error_codes.h.")
    output_lines.append('"""')
    output_lines.append("")
    for (symbol, val) in error_consts:
        output_lines.append(f"{symbol} = {val}")

    # Write out to error_codes_generated.py in the output_dir
    output_file_path = os.path.join(output_dir, "error_codes_generated.py")
    with open(output_file_path, "w", encoding="utf-8") as out_f:
        out_f.write("\n".join(output_lines) + "\n")

    print(f"Generated {len(error_consts)} error constants in {output_file_path}")

if __name__ == "__main__":
    main()
