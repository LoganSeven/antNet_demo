# Auto-generated by generate_cffi_defs.py â€“ DO NOT EDIT
CDEF_SOURCE = '''\
typedef struct {
    int node_id;
    int delay_ms;
    float x;
    float y;
    int radius;
} NodeData;
typedef struct {
    int from_id;
    int to_id;
} EdgeData;
typedef struct {
    int nb_swarms;
    int set_nb_nodes;
    int min_hops;
    int max_hops;
    int default_delay;
    int death_delay;
    int under_attack_id;
    _Bool attack_started;
    _Bool simulate_ddos;
    _Bool show_random_performance;
    _Bool show_brute_performance;
} AppConfig;
typedef struct {
    int candidate_nodes[1024];
    int candidate_count;
    int current_L;
    int permutation[1024];
    int at_first_permutation;
    int done;
} BruteForceState;
typedef struct {
    int *nodes;
    int node_count;
    int total_latency;
} AntNetPathInfo;
typedef struct {
    char __size[56];
} pthread_attr_t;
typedef struct {
    char __size[40];
} pthread_mutex_t;
typedef struct {
    char __size[4];
} pthread_mutexattr_t;
typedef struct {
    char __size[48];
} pthread_cond_t;
typedef struct {
    char __size[4];
} pthread_condattr_t;
typedef struct {
    char __size[56];
} pthread_rwlock_t;
typedef struct {
    char __size[8];
} pthread_rwlockattr_t;
typedef struct {
    char __size[32];
} pthread_barrier_t;
typedef struct {
    char __size[4];
} pthread_barrierattr_t;
typedef struct {
    int node_count;
    int min_hops;
    int max_hops;
    NodeData *nodes;
    int num_nodes;
    EdgeData *edges;
    int num_edges;
    int iteration;
    pthread_mutex_t lock;
    int random_best_nodes[1024];
    int random_best_length;
    int random_best_latency;
    AppConfig config;
    int brute_best_nodes[1024];
    int brute_best_length;
    int brute_best_latency;
    BruteForceState brute_state;
} AntNetContext;
typedef struct {
    pthread_mutex_t lock;
    NodeData *start_node;
    NodeData *end_node;
    NodeData *hop_nodes;
    size_t hop_count;
    EdgeData *edges;
    size_t edge_count;
} HopMapManager;



int antnet_initialize(int node_count, int min_hops, int max_hops);
int antnet_run_iteration(int context_id);
int antnet_shutdown(int context_id);
int antnet_get_best_path(int context_id, int *out_nodes, int max_size, int *out_path_len, int *out_total_latency);
int antnet_run_all_solvers(int context_id, int *out_nodes_aco, int max_size_aco, int *out_len_aco, int *out_latency_aco, int *out_nodes_random, int max_size_random, int *out_len_random, int *out_latency_random, int *out_nodes_brute, int max_size_brute, int *out_len_brute, int *out_latency_brute);
int antnet_init_from_config(const char *config_path);
int antnet_update_topology(int context_id, const NodeData *nodes, int num_nodes, const EdgeData *edges, int num_edges);
int brute_force_search_step(AntNetContext *ctx, int start_id, int end_id, int *out_nodes, int max_size, int *out_path_len, int *out_total_latency);
void brute_force_reset_state(AntNetContext *ctx);
int aco_v1_init(AntNetContext *ctx);
int aco_v1_run_iteration(AntNetContext *ctx);
int aco_v1_get_best_path(AntNetContext *ctx, int *out_nodes, int max_size, int *out_path_len, int *out_total_latency);
int aco_v1_search_path(AntNetContext *ctx, int start_id, int end_id, int *out_nodes, int max_size, int *out_path_len, int *out_total_latency);
_Bool config_load(AppConfig *cfg, const char *filepath);
_Bool config_save(const AppConfig *cfg, const char *filepath);
void config_set_defaults(AppConfig *cfg);
HopMapManager *hop_map_manager_create();
void hop_map_manager_destroy(HopMapManager *mgr);
void hop_map_manager_initialize_map(HopMapManager *mgr, int total_nodes);
void hop_map_manager_create_default_edges(HopMapManager *mgr);
void hop_map_manager_export_topology(HopMapManager *mgr, NodeData *out_nodes, size_t *out_node_count, EdgeData *out_edges, size_t *out_edge_count);
'''